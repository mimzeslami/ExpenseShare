// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: invitation.sql

package db

import (
	"context"
	"database/sql"
)

const createInvitation = `-- name: CreateInvitation :one

INSERT INTO invitations (
  inviter_id,
  invitee_id,
  group_id,
  status,
  code
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, inviter_id, invitee_id, group_id, status, code, created_at, accepted_at, rejected_at
`

type CreateInvitationParams struct {
	InviterID int64  `json:"inviter_id"`
	InviteeID int64  `json:"invitee_id"`
	GroupID   int64  `json:"group_id"`
	Status    string `json:"status"`
	Code      string `json:"code"`
}

// invitations.sql
// Create an invitation
func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Invitations, error) {
	row := q.db.QueryRowContext(ctx, createInvitation,
		arg.InviterID,
		arg.InviteeID,
		arg.GroupID,
		arg.Status,
		arg.Code,
	)
	var i Invitations
	err := row.Scan(
		&i.ID,
		&i.InviterID,
		&i.InviteeID,
		&i.GroupID,
		&i.Status,
		&i.Code,
		&i.CreatedAt,
		&i.AcceptedAt,
		&i.RejectedAt,
	)
	return i, err
}

const deleteInvitation = `-- name: DeleteInvitation :exec
DELETE FROM invitations
WHERE id = $1
`

// Delete an invitation by ID
func (q *Queries) DeleteInvitation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInvitation, id)
	return err
}

const getCurrentInvitationByGroupIDAndInviteeID = `-- name: GetCurrentInvitationByGroupIDAndInviteeID :one
SELECT id, inviter_id, invitee_id, group_id, status, code, created_at, accepted_at, rejected_at FROM invitations
WHERE group_id = $1 AND invitee_id = $2 AND inviter_id = $3
`

type GetCurrentInvitationByGroupIDAndInviteeIDParams struct {
	GroupID   int64 `json:"group_id"`
	InviteeID int64 `json:"invitee_id"`
	InviterID int64 `json:"inviter_id"`
}

// Get Current Invitation By GroupID And InviteeID
func (q *Queries) GetCurrentInvitationByGroupIDAndInviteeID(ctx context.Context, arg GetCurrentInvitationByGroupIDAndInviteeIDParams) (Invitations, error) {
	row := q.db.QueryRowContext(ctx, getCurrentInvitationByGroupIDAndInviteeID, arg.GroupID, arg.InviteeID, arg.InviterID)
	var i Invitations
	err := row.Scan(
		&i.ID,
		&i.InviterID,
		&i.InviteeID,
		&i.GroupID,
		&i.Status,
		&i.Code,
		&i.CreatedAt,
		&i.AcceptedAt,
		&i.RejectedAt,
	)
	return i, err
}

const getInvitationByCode = `-- name: GetInvitationByCode :one
SELECT id, inviter_id, invitee_id, group_id, status, code, created_at, accepted_at, rejected_at FROM invitations
WHERE code = $1
`

// Get invitation by code
func (q *Queries) GetInvitationByCode(ctx context.Context, code string) (Invitations, error) {
	row := q.db.QueryRowContext(ctx, getInvitationByCode, code)
	var i Invitations
	err := row.Scan(
		&i.ID,
		&i.InviterID,
		&i.InviteeID,
		&i.GroupID,
		&i.Status,
		&i.Code,
		&i.CreatedAt,
		&i.AcceptedAt,
		&i.RejectedAt,
	)
	return i, err
}

const getInvitationByID = `-- name: GetInvitationByID :one
SELECT id, inviter_id, invitee_id, group_id, status, code, created_at, accepted_at, rejected_at FROM invitations
WHERE id = $1 LIMIT 1
`

// Get an invitation by ID
func (q *Queries) GetInvitationByID(ctx context.Context, id int64) (Invitations, error) {
	row := q.db.QueryRowContext(ctx, getInvitationByID, id)
	var i Invitations
	err := row.Scan(
		&i.ID,
		&i.InviterID,
		&i.InviteeID,
		&i.GroupID,
		&i.Status,
		&i.Code,
		&i.CreatedAt,
		&i.AcceptedAt,
		&i.RejectedAt,
	)
	return i, err
}

const getUserInfoByInvitationCode = `-- name: GetUserInfoByInvitationCode :one
SELECT users.id, users.email, users.first_name, users.last_name, users.phone, users.time_zone FROM users
INNER JOIN invitations ON users.id = invitations.invitee_id
WHERE invitations.code = $1
`

type GetUserInfoByInvitationCodeRow struct {
	ID        int64  `json:"id"`
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Phone     string `json:"phone"`
	TimeZone  string `json:"time_zone"`
}

// Get User info by invitation code
func (q *Queries) GetUserInfoByInvitationCode(ctx context.Context, code string) (GetUserInfoByInvitationCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getUserInfoByInvitationCode, code)
	var i GetUserInfoByInvitationCodeRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.TimeZone,
	)
	return i, err
}

const listInvitationsForInvitee = `-- name: ListInvitationsForInvitee :many
SELECT id, inviter_id, invitee_id, group_id, status, code, created_at, accepted_at, rejected_at FROM invitations
WHERE invitee_id = $1
LIMIT $2 OFFSET $3
`

type ListInvitationsForInviteeParams struct {
	InviteeID int64 `json:"invitee_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

// List invitations for an invitee with pagination
func (q *Queries) ListInvitationsForInvitee(ctx context.Context, arg ListInvitationsForInviteeParams) ([]Invitations, error) {
	rows, err := q.db.QueryContext(ctx, listInvitationsForInvitee, arg.InviteeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invitations{}
	for rows.Next() {
		var i Invitations
		if err := rows.Scan(
			&i.ID,
			&i.InviterID,
			&i.InviteeID,
			&i.GroupID,
			&i.Status,
			&i.Code,
			&i.CreatedAt,
			&i.AcceptedAt,
			&i.RejectedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvitation = `-- name: UpdateInvitation :one
UPDATE invitations SET
  status = $2,
  accepted_at = $3,
  rejected_at = $4
WHERE id = $1 RETURNING id, inviter_id, invitee_id, group_id, status, code, created_at, accepted_at, rejected_at
`

type UpdateInvitationParams struct {
	ID         int64        `json:"id"`
	Status     string       `json:"status"`
	AcceptedAt sql.NullTime `json:"accepted_at"`
	RejectedAt sql.NullTime `json:"rejected_at"`
}

// Update an invitation by ID
func (q *Queries) UpdateInvitation(ctx context.Context, arg UpdateInvitationParams) (Invitations, error) {
	row := q.db.QueryRowContext(ctx, updateInvitation,
		arg.ID,
		arg.Status,
		arg.AcceptedAt,
		arg.RejectedAt,
	)
	var i Invitations
	err := row.Scan(
		&i.ID,
		&i.InviterID,
		&i.InviteeID,
		&i.GroupID,
		&i.Status,
		&i.Code,
		&i.CreatedAt,
		&i.AcceptedAt,
		&i.RejectedAt,
	)
	return i, err
}

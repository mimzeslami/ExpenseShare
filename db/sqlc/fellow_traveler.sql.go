// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: fellow_traveler.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFellowTravelers = `-- name: CreateFellowTravelers :one
INSERT INTO fellow_travelers (
  trip_id,
  fellow_first_name,
  fellow_last_name,
  fellow_email
) VALUES (
  $1, $2, $3, $4
) RETURNING id, trip_id, fellow_first_name, fellow_last_name, fellow_email
`

type CreateFellowTravelersParams struct {
	TripID          uuid.UUID `json:"trip_id"`
	FellowFirstName string        `json:"fellow_first_name"`
	FellowLastName  string        `json:"fellow_last_name"`
	FellowEmail     string        `json:"fellow_email"`
}

func (q *Queries) CreateFellowTravelers(ctx context.Context, arg CreateFellowTravelersParams) (FellowTravelers, error) {
	row := q.db.QueryRowContext(ctx, createFellowTravelers,
		arg.TripID,
		arg.FellowFirstName,
		arg.FellowLastName,
		arg.FellowEmail,
	)
	var i FellowTravelers
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.FellowFirstName,
		&i.FellowLastName,
		&i.FellowEmail,
	)
	return i, err
}

const getFellowTraveler = `-- name: GetFellowTraveler :one
SELECT id, trip_id, fellow_first_name, fellow_last_name, fellow_email FROM fellow_travelers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFellowTraveler(ctx context.Context, id uuid.UUID) (FellowTravelers, error) {
	row := q.db.QueryRowContext(ctx, getFellowTraveler, id)
	var i FellowTravelers
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.FellowFirstName,
		&i.FellowLastName,
		&i.FellowEmail,
	)
	return i, err
}

const getTripFellowTravelers = `-- name: GetTripFellowTravelers :many
SELECT id, trip_id, fellow_first_name, fellow_last_name, fellow_email FROM fellow_travelers
WHERE trip_id = $1
`

func (q *Queries) GetTripFellowTravelers(ctx context.Context, tripID uuid.UUID) ([]FellowTravelers, error) {
	rows, err := q.db.QueryContext(ctx, getTripFellowTravelers, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FellowTravelers{}
	for rows.Next() {
		var i FellowTravelers
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.FellowFirstName,
			&i.FellowLastName,
			&i.FellowEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: fellow_traveler.sql

package db

import (
	"context"
)

const createFellowTravelers = `-- name: CreateFellowTravelers :one
INSERT INTO fellow_travelers (
  trip_id,
  fellow_first_name,
  fellow_last_name
) VALUES (
  $1, $2, $3
) RETURNING id, trip_id, fellow_first_name, fellow_last_name, created_at
`

type CreateFellowTravelersParams struct {
	TripID          int64  `json:"trip_id"`
	FellowFirstName string `json:"fellow_first_name"`
	FellowLastName  string `json:"fellow_last_name"`
}

func (q *Queries) CreateFellowTravelers(ctx context.Context, arg CreateFellowTravelersParams) (FellowTravelers, error) {
	row := q.db.QueryRowContext(ctx, createFellowTravelers, arg.TripID, arg.FellowFirstName, arg.FellowLastName)
	var i FellowTravelers
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.FellowFirstName,
		&i.FellowLastName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFellowTraveler = `-- name: DeleteFellowTraveler :exec
DELETE FROM fellow_travelers WHERE id = $1
`

func (q *Queries) DeleteFellowTraveler(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFellowTraveler, id)
	return err
}

const deleteTripFellowTravelers = `-- name: DeleteTripFellowTravelers :exec
DELETE FROM fellow_travelers
WHERE trip_id = $1
`

func (q *Queries) DeleteTripFellowTravelers(ctx context.Context, tripID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTripFellowTravelers, tripID)
	return err
}

const getFellowTraveler = `-- name: GetFellowTraveler :one
SELECT fellow_travelers.id, fellow_travelers.trip_id, fellow_travelers.fellow_first_name, fellow_travelers.fellow_last_name, fellow_travelers.created_at FROM fellow_travelers
LEFT JOIN trips ON fellow_travelers.trip_id = trips.id
WHERE fellow_travelers.id = $1 AND trips.user_id = $2 LIMIT 1
`

type GetFellowTravelerParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetFellowTraveler(ctx context.Context, arg GetFellowTravelerParams) (FellowTravelers, error) {
	row := q.db.QueryRowContext(ctx, getFellowTraveler, arg.ID, arg.UserID)
	var i FellowTravelers
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.FellowFirstName,
		&i.FellowLastName,
		&i.CreatedAt,
	)
	return i, err
}

const getTripFellowTravelers = `-- name: GetTripFellowTravelers :many
SELECT fellow_travelers.id, fellow_travelers.trip_id, fellow_travelers.fellow_first_name, fellow_travelers.fellow_last_name, fellow_travelers.created_at  FROM fellow_travelers
LEFT JOIN trips ON fellow_travelers.trip_id = trips.id
WHERE fellow_travelers.trip_id = $1 AND trips.user_id = $2
`

type GetTripFellowTravelersParams struct {
	TripID int64 `json:"trip_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetTripFellowTravelers(ctx context.Context, arg GetTripFellowTravelersParams) ([]FellowTravelers, error) {
	rows, err := q.db.QueryContext(ctx, getTripFellowTravelers, arg.TripID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FellowTravelers{}
	for rows.Next() {
		var i FellowTravelers
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.FellowFirstName,
			&i.FellowLastName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFellowTraveler = `-- name: UpdateFellowTraveler :one
UPDATE fellow_travelers SET
  fellow_first_name = $2,
  fellow_last_name = $3
WHERE id = $1 RETURNING id, trip_id, fellow_first_name, fellow_last_name, created_at
`

type UpdateFellowTravelerParams struct {
	ID              int64  `json:"id"`
	FellowFirstName string `json:"fellow_first_name"`
	FellowLastName  string `json:"fellow_last_name"`
}

func (q *Queries) UpdateFellowTraveler(ctx context.Context, arg UpdateFellowTravelerParams) (FellowTravelers, error) {
	row := q.db.QueryRowContext(ctx, updateFellowTraveler, arg.ID, arg.FellowFirstName, arg.FellowLastName)
	var i FellowTravelers
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.FellowFirstName,
		&i.FellowLastName,
		&i.CreatedAt,
	)
	return i, err
}

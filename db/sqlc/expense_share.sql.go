// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: expense_share.sql

package db

import (
	"context"
)

const createExpenseShare = `-- name: CreateExpenseShare :one

INSERT INTO expense_shares (
  expense_id,
  user_id,
  share,
  paid_status
) VALUES (
  $1, $2, $3, $4
) RETURNING id, expense_id, user_id, share, paid_status, created_at
`

type CreateExpenseShareParams struct {
	ExpenseID  int64  `json:"expense_id"`
	UserID     int64  `json:"user_id"`
	Share      string `json:"share"`
	PaidStatus bool   `json:"paid_status"`
}

// expense_shares.sql
// Create an expense share
func (q *Queries) CreateExpenseShare(ctx context.Context, arg CreateExpenseShareParams) (ExpenseShares, error) {
	row := q.db.QueryRowContext(ctx, createExpenseShare,
		arg.ExpenseID,
		arg.UserID,
		arg.Share,
		arg.PaidStatus,
	)
	var i ExpenseShares
	err := row.Scan(
		&i.ID,
		&i.ExpenseID,
		&i.UserID,
		&i.Share,
		&i.PaidStatus,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpenseShare = `-- name: DeleteExpenseShare :exec
DELETE FROM expense_shares
WHERE id = $1
`

// Delete an expense share by ID
func (q *Queries) DeleteExpenseShare(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExpenseShare, id)
	return err
}

const getExpenseShareByID = `-- name: GetExpenseShareByID :one
SELECT id, expense_id, user_id, share, paid_status, created_at FROM expense_shares
WHERE id = $1 LIMIT 1
`

// Get an expense share by ID
func (q *Queries) GetExpenseShareByID(ctx context.Context, id int64) (ExpenseShares, error) {
	row := q.db.QueryRowContext(ctx, getExpenseShareByID, id)
	var i ExpenseShares
	err := row.Scan(
		&i.ID,
		&i.ExpenseID,
		&i.UserID,
		&i.Share,
		&i.PaidStatus,
		&i.CreatedAt,
	)
	return i, err
}

const listExpenseShares = `-- name: ListExpenseShares :many
SELECT id, expense_id, user_id, share, paid_status, created_at FROM expense_shares
WHERE expense_id = $1
LIMIT $2 OFFSET $3
`

type ListExpenseSharesParams struct {
	ExpenseID int64 `json:"expense_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

// List expense shares for an expense with pagination
func (q *Queries) ListExpenseShares(ctx context.Context, arg ListExpenseSharesParams) ([]ExpenseShares, error) {
	rows, err := q.db.QueryContext(ctx, listExpenseShares, arg.ExpenseID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExpenseShares{}
	for rows.Next() {
		var i ExpenseShares
		if err := rows.Scan(
			&i.ID,
			&i.ExpenseID,
			&i.UserID,
			&i.Share,
			&i.PaidStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpenseShare = `-- name: UpdateExpenseShare :one
UPDATE expense_shares SET
  share = $2,
  paid_status = $3
WHERE id = $1 RETURNING id, expense_id, user_id, share, paid_status, created_at
`

type UpdateExpenseShareParams struct {
	ID         int64  `json:"id"`
	Share      string `json:"share"`
	PaidStatus bool   `json:"paid_status"`
}

// Update an expense share by ID
func (q *Queries) UpdateExpenseShare(ctx context.Context, arg UpdateExpenseShareParams) (ExpenseShares, error) {
	row := q.db.QueryRowContext(ctx, updateExpenseShare, arg.ID, arg.Share, arg.PaidStatus)
	var i ExpenseShares
	err := row.Scan(
		&i.ID,
		&i.ExpenseID,
		&i.UserID,
		&i.Share,
		&i.PaidStatus,
		&i.CreatedAt,
	)
	return i, err
}

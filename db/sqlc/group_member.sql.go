// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: group_member.sql

package db

import (
	"context"
)

const createGroupMember = `-- name: CreateGroupMember :one

INSERT INTO group_members (
  group_id,
  user_id
) VALUES (
  $1, $2
) RETURNING id, group_id, user_id, created_at
`

type CreateGroupMemberParams struct {
	GroupID int64 `json:"group_id"`
	UserID  int64 `json:"user_id"`
}

// GroupMembers
// Create a group member
func (q *Queries) CreateGroupMember(ctx context.Context, arg CreateGroupMemberParams) (GroupMembers, error) {
	row := q.db.QueryRowContext(ctx, createGroupMember, arg.GroupID, arg.UserID)
	var i GroupMembers
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroupMember = `-- name: DeleteGroupMember :exec
DELETE FROM group_members
WHERE id = $1
`

// Delete a group member by ID
func (q *Queries) DeleteGroupMember(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroupMember, id)
	return err
}

const deleteGroupMembers = `-- name: DeleteGroupMembers :exec
DELETE FROM group_members
WHERE group_id = $1
`

// Delete all group members for a group
func (q *Queries) DeleteGroupMembers(ctx context.Context, groupID int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroupMembers, groupID)
	return err
}

const getGroupMemberByID = `-- name: GetGroupMemberByID :one
SELECT id, group_id, user_id, created_at FROM group_members
WHERE id = $1 LIMIT 1
`

// Get a group member by ID
func (q *Queries) GetGroupMemberByID(ctx context.Context, id int64) (GroupMembers, error) {
	row := q.db.QueryRowContext(ctx, getGroupMemberByID, id)
	var i GroupMembers
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listGroupMembers = `-- name: ListGroupMembers :many
SELECT id, group_id, user_id, created_at FROM group_members
WHERE group_id = $1
LIMIT $2 OFFSET $3
`

type ListGroupMembersParams struct {
	GroupID int64 `json:"group_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

// List group members for a group with pagination
func (q *Queries) ListGroupMembers(ctx context.Context, arg ListGroupMembersParams) ([]GroupMembers, error) {
	rows, err := q.db.QueryContext(ctx, listGroupMembers, arg.GroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupMembers{}
	for rows.Next() {
		var i GroupMembers
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroupMember = `-- name: UpdateGroupMember :one
UPDATE group_members SET
  user_id = $2
WHERE id = $1 RETURNING id, group_id, user_id, created_at
`

type UpdateGroupMemberParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

// Update a group member by ID
func (q *Queries) UpdateGroupMember(ctx context.Context, arg UpdateGroupMemberParams) (GroupMembers, error) {
	row := q.db.QueryRowContext(ctx, updateGroupMember, arg.ID, arg.UserID)
	var i GroupMembers
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

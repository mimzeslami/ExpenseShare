// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: trip.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
  trip_name,
  start_date,
  end_date,
  user_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, trip_name, start_date, end_date, user_id
`

type CreateTripParams struct {
	TripName  string        `json:"trip_name"`
	StartDate time.Time     `json:"start_date"`
	EndDate   time.Time     `json:"end_date"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trips, error) {
	row := q.db.QueryRowContext(ctx, createTrip,
		arg.TripName,
		arg.StartDate,
		arg.EndDate,
		arg.UserID,
	)
	var i Trips
	err := row.Scan(
		&i.ID,
		&i.TripName,
		&i.StartDate,
		&i.EndDate,
		&i.UserID,
	)
	return i, err
}

const getTrip = `-- name: GetTrip :one
SELECT id, trip_name, start_date, end_date, user_id FROM trips
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrip(ctx context.Context, id uuid.UUID) (Trips, error) {
	row := q.db.QueryRowContext(ctx, getTrip, id)
	var i Trips
	err := row.Scan(
		&i.ID,
		&i.TripName,
		&i.StartDate,
		&i.EndDate,
		&i.UserID,
	)
	return i, err
}

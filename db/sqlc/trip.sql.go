// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: trip.sql

package db

import (
	"context"
	"time"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
  title,
  start_date,
  end_date,
  user_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, title, user_id, start_date, end_date, created_at
`

type CreateTripParams struct {
	Title     string    `json:"title"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	UserID    int64     `json:"user_id"`
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trips, error) {
	row := q.db.QueryRowContext(ctx, createTrip,
		arg.Title,
		arg.StartDate,
		arg.EndDate,
		arg.UserID,
	)
	var i Trips
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const getTrip = `-- name: GetTrip :one
SELECT id, title, user_id, start_date, end_date, created_at FROM trips
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrip(ctx context.Context, id int64) (Trips, error) {
	row := q.db.QueryRowContext(ctx, getTrip, id)
	var i Trips
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

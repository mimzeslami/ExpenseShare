// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: notification.sql

package db

import (
	"context"
)

const createNotification = `-- name: CreateNotification :one

INSERT INTO notifications (
  user_id,
  message,
  is_read
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, message, is_read, created_at
`

type CreateNotificationParams struct {
	UserID  int64  `json:"user_id"`
	Message string `json:"message"`
	IsRead  bool   `json:"is_read"`
}

// notifications.sql
// Create a notification
func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notifications, error) {
	row := q.db.QueryRowContext(ctx, createNotification, arg.UserID, arg.Message, arg.IsRead)
	var i Notifications
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE id = $1
`

// Delete a notification by ID
func (q *Queries) DeleteNotification(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, user_id, message, is_read, created_at FROM notifications
WHERE id = $1 LIMIT 1
`

// Get a notification by ID
func (q *Queries) GetNotificationByID(ctx context.Context, id int64) (Notifications, error) {
	row := q.db.QueryRowContext(ctx, getNotificationByID, id)
	var i Notifications
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const listNotifications = `-- name: ListNotifications :many
SELECT id, user_id, message, is_read, created_at FROM notifications
WHERE user_id = $1
LIMIT $2 OFFSET $3
`

type ListNotificationsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// List notifications for a user with pagination
func (q *Queries) ListNotifications(ctx context.Context, arg ListNotificationsParams) ([]Notifications, error) {
	rows, err := q.db.QueryContext(ctx, listNotifications, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notifications{}
	for rows.Next() {
		var i Notifications
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markNotificationAsRead = `-- name: MarkNotificationAsRead :exec
UPDATE notifications SET
  is_read = true
WHERE id = $1 RETURNING id, user_id, message, is_read, created_at
`

// Mark a notification as read
func (q *Queries) MarkNotificationAsRead(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, markNotificationAsRead, id)
	return err
}

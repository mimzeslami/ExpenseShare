// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: expenses.sql

package db

import (
	"context"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (
  trip_id,
  payer_traveler_id,
  amount,
  description
) VALUES (
  $1, $2, $3, $4
) RETURNING id, trip_id, payer_traveler_id, amount, description, created_at
`

type CreateExpenseParams struct {
	TripID          int64  `json:"trip_id"`
	PayerTravelerID int64  `json:"payer_traveler_id"`
	Amount          string `json:"amount"`
	Description     string `json:"description"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expenses, error) {
	row := q.db.QueryRowContext(ctx, createExpense,
		arg.TripID,
		arg.PayerTravelerID,
		arg.Amount,
		arg.Description,
	)
	var i Expenses
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.PayerTravelerID,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses WHERE id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExpense, id)
	return err
}

const deleteTripExpenses = `-- name: DeleteTripExpenses :exec
DELETE FROM expenses
WHERE trip_id = $1
`

func (q *Queries) DeleteTripExpenses(ctx context.Context, tripID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTripExpenses, tripID)
	return err
}

const getExpense = `-- name: GetExpense :one
SELECT expenses.id, expenses.trip_id, expenses.payer_traveler_id, expenses.amount, expenses.description, expenses.created_at FROM expenses
LEFT JOIN trips ON expenses.trip_id = trips.id
WHERE expenses.id = $1 AND trips.user_id = $2 LIMIT 1
`

type GetExpenseParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetExpense(ctx context.Context, arg GetExpenseParams) (Expenses, error) {
	row := q.db.QueryRowContext(ctx, getExpense, arg.ID, arg.UserID)
	var i Expenses
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.PayerTravelerID,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getTripExpenses = `-- name: GetTripExpenses :many
SELECT expenses.id, expenses.trip_id, expenses.payer_traveler_id, expenses.amount, expenses.description, expenses.created_at  FROM expenses
LEFT JOIN trips ON expenses.trip_id = trips.id
WHERE expenses.trip_id = $1 AND trips.user_id = $2
`

type GetTripExpensesParams struct {
	TripID int64 `json:"trip_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetTripExpenses(ctx context.Context, arg GetTripExpensesParams) ([]Expenses, error) {
	rows, err := q.db.QueryContext(ctx, getTripExpenses, arg.TripID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Expenses{}
	for rows.Next() {
		var i Expenses
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.PayerTravelerID,
			&i.Amount,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE expenses SET
  trip_id = $1,
  payer_traveler_id = $2,
  amount = $3,
  description = $4
WHERE id = $5 RETURNING id, trip_id, payer_traveler_id, amount, description, created_at
`

type UpdateExpenseParams struct {
	TripID          int64  `json:"trip_id"`
	PayerTravelerID int64  `json:"payer_traveler_id"`
	Amount          string `json:"amount"`
	Description     string `json:"description"`
	ID              int64  `json:"id"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expenses, error) {
	row := q.db.QueryRowContext(ctx, updateExpense,
		arg.TripID,
		arg.PayerTravelerID,
		arg.Amount,
		arg.Description,
		arg.ID,
	)
	var i Expenses
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.PayerTravelerID,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

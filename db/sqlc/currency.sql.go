// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: currency.sql

package db

import (
	"context"
	"time"
)

const createCurrency = `-- name: CreateCurrency :one

INSERT INTO currencies (
  code,
  name,
  symbol,
  exchange_rate,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, code, name, symbol, exchange_rate, updated_at
`

type CreateCurrencyParams struct {
	Code         string    `json:"code"`
	Name         string    `json:"name"`
	Symbol       string    `json:"symbol"`
	ExchangeRate float64   `json:"exchange_rate"`
	UpdatedAt    time.Time `json:"updated_at"`
}

// currencies.sql
// Create a currency
func (q *Queries) CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (Currencies, error) {
	row := q.db.QueryRowContext(ctx, createCurrency,
		arg.Code,
		arg.Name,
		arg.Symbol,
		arg.ExchangeRate,
		arg.UpdatedAt,
	)
	var i Currencies
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Symbol,
		&i.ExchangeRate,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCurrency = `-- name: DeleteCurrency :exec
DELETE FROM currencies
WHERE id = $1
`

// Delete a currency by ID
func (q *Queries) DeleteCurrency(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCurrency, id)
	return err
}

const getCurrencyByID = `-- name: GetCurrencyByID :one
SELECT id, code, name, symbol, exchange_rate, updated_at FROM currencies
WHERE id = $1 LIMIT 1
`

// Get a currency by ID
func (q *Queries) GetCurrencyByID(ctx context.Context, id int64) (Currencies, error) {
	row := q.db.QueryRowContext(ctx, getCurrencyByID, id)
	var i Currencies
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Symbol,
		&i.ExchangeRate,
		&i.UpdatedAt,
	)
	return i, err
}

const listCurrencies = `-- name: ListCurrencies :many
SELECT id, code, name, symbol, exchange_rate, updated_at FROM currencies
LIMIT $1 OFFSET $2
`

type ListCurrenciesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// List currencies with pagination
func (q *Queries) ListCurrencies(ctx context.Context, arg ListCurrenciesParams) ([]Currencies, error) {
	rows, err := q.db.QueryContext(ctx, listCurrencies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Currencies{}
	for rows.Next() {
		var i Currencies
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Symbol,
			&i.ExchangeRate,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCurrency = `-- name: UpdateCurrency :one
UPDATE currencies SET
  code = $2,
  name = $3,
  symbol = $4,
  exchange_rate = $5,
  updated_at = $6
WHERE id = $1 RETURNING id, code, name, symbol, exchange_rate, updated_at
`

type UpdateCurrencyParams struct {
	ID           int64     `json:"id"`
	Code         string    `json:"code"`
	Name         string    `json:"name"`
	Symbol       string    `json:"symbol"`
	ExchangeRate float64   `json:"exchange_rate"`
	UpdatedAt    time.Time `json:"updated_at"`
}

// Update a currency by ID
func (q *Queries) UpdateCurrency(ctx context.Context, arg UpdateCurrencyParams) (Currencies, error) {
	row := q.db.QueryRowContext(ctx, updateCurrency,
		arg.ID,
		arg.Code,
		arg.Name,
		arg.Symbol,
		arg.ExchangeRate,
		arg.UpdatedAt,
	)
	var i Currencies
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Symbol,
		&i.ExchangeRate,
		&i.UpdatedAt,
	)
	return i, err
}
